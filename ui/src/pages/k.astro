<!-- import React, { useState, useEffect } from "react";
import Web3 from "web3";
import type { AbiItem } from "web3-utils";
import { Toaster, toast } from "react-hot-toast";
import BaseLayout from "../layouts/BaseLayout.astro";
import DisplayAvailableUSD from "../components/swapComponents/DisplayAvailableUSD";

// Import the contract ABIs
import authorizeContractABI from "../../abi/AuthorizeContract.json";
import mockUSDCABI from "../../abi/MockUSDC.json";

const BuyTBillsNewUI = () => {
  const [web3, setWeb3] = useState<Web3 | null>(null);
  const [accounts, setAccounts] = useState<string[]>([]);
  const [amount, setAmount] = useState<string>("1");
  const [authorizeContractInstance, setAuthorizeContractInstance] =
    useState<any>(null);
  const [mockUSDCInstance, setMockUSDCInstance] = useState<any>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const authorizeContractAddress = import.meta.env.PUBLIC_AUTHORIZED_CONTRACT;
  const mockUSDCAddress = import.meta.env.PUBLIC_MOCK_USDC_ADDRESS;

  useEffect(() => {
    const initWeb3 = async () => {
      if (window.ethereum) {
        try {
          const web3Instance = new Web3(window.ethereum);
          setWeb3(web3Instance);

          const accounts = await web3Instance.eth.requestAccounts();
          setAccounts(accounts);

          const authorizeContract = new web3Instance.eth.Contract(
            authorizeContractABI as AbiItem[],
            authorizeContractAddress
          );
          setAuthorizeContractInstance(authorizeContract);

          const mockUSDCContract = new web3Instance.eth.Contract(
            mockUSDCABI as AbiItem[],
            mockUSDCAddress
          );
          setMockUSDCInstance(mockUSDCContract);
        } catch (error) {
          console.error("Error initializing Web3:", error);
          toast.error("Error initializing Web3");
        }
      } else {
        console.error("MetaMask is not installed");
        toast.error("MetaMask is not installed");
      }
    };

    initWeb3();
  }, []);

  const handleAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setAmount(event.target.value);
  };

  const approveAndBuy = async () => {
    if (!mockUSDCInstance || !authorizeContractInstance || !accounts[0]) {
      toast.error("Please connect your wallet");
      return;
    }

    try {
      setIsLoading(true);
      const amountToApproveAndSpend = parseFloat(amount) * 1000000;

      // Approve spending
      await mockUSDCInstance.methods
        .approve(authorizeContractAddress, amountToApproveAndSpend.toString())
        .send({ from: accounts[0] });
      toast.success("Spending approved successfully");

      // Buy TBills
      await authorizeContractInstance.methods
        .buy(amountToApproveAndSpend.toString())
        .send({ from: accounts[0] });
      toast.success("TBills purchased successfully");
    } catch (error) {
      console.error("Error in approve and buy process:", error);
      toast.error("Error in approve and buy process");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <BaseLayout pageTitle="">
      <Toaster />
      <div>
        <div class="flex flex-col my-28 items-center">
          <div class="bg-white rounded-3xl p-4 shadow-md">
            <div class="flex justify-between items-center">
              <h1 class="text-4xl text-black font-bold mb-4">Buy TBILL</h1>
              <span class="text-sm text-blue-700 max-h-6 font-light bg-blue-200 rounded-lg p-0.5">
                âš¡ Instant ~30s Settlement
              </span>
            </div>
            <DisplayAvailableUSD client:load />
            <div class="border rounded-2xl border-1 p-2 my-5">
              <div class="flex items-center justify-between mb-2">
                <span class="text-sm text-gray-500">Balance: 0.0000 USDC</span>
              </div>
              <div class="flex items-center mb-2">
                <input
                  type="number"
                  class="w-full rounded-l-md text-2xl text-black font-bold py-2 px-3 leading-tight focus:outline-none focus:shadow-outline"
                  value={amount}
                  onChange={handleAmountChange}
                />
                <span class="bg-gray-200 px-3 py-2 rounded-md text-gray-700">
                  Max
                </span>
                <select class="ml-2 rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                  <option> USDC</option>
                </select>
              </div>
            </div>
            <div class="flex flex-1 justify-center item-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="text-black rounded-full p-1 border border-1"
                width="3em"
                height="3em"
                viewBox="0 0 28 28"
              >
                <path
                  fill="currentColor"
                  d="m8.352 4.011l.058-.007L8.5 4l.075.003l.126.017l.111.03l.111.044l.098.052l.104.074l.082.073l5.5 5.5a1 1 0 0 1-1.32 1.497l-.094-.083L9.5 7.415V23a1 1 0 0 1-1.993.117L7.5 23V7.415l-3.793 3.792a1 1 0 0 1-1.32.083l-.094-.083a1 1 0 0 1-.083-1.32l.083-.094l5.5-5.5a1 1 0 0 1 .112-.097l.11-.071l.114-.054l.105-.035zM19.5 4a1 1 0 0 1 .993.883L20.5 5v15.585l3.793-3.792l.094-.083a1 1 0 0 1 1.403 1.403l-.083.094l-5.5 5.5l-.044.041l-.068.056l-.11.071l-.114.054l-.105.035l-.117.025l-.09.01h-.118l-.06-.006l-.114-.02l-.109-.033l-.081-.034l-.098-.052l-.096-.067a1 1 0 0 1-.09-.08l-5.5-5.5l-.083-.094a1 1 0 0 1 0-1.226l.083-.094l.094-.083a1 1 0 0 1 1.226 0l.094.083l3.793 3.792V5l.007-.117A1 1 0 0 1 19.5 4"
                ></path>
              </svg>
            </div>
            <div class="border rounded-2xl border-1 p-2 my-5">
              <div class="flex items-center justify-between mb-2">
                <span class="text-sm text-gray-500">Balance: 0.0000 USDC</span>
              </div>
              <div class="flex items-center mb-2">
                <input
                  type="number"
                  class="w-full rounded-l-md text-2xl text-black font-bold py-2 px-3 leading-tight focus:outline-none focus:shadow-outline"
                  value={amount}
                  readonly
                />
                <select class="ml-2 rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                  <option> TBILL</option>
                </select>
              </div>
            </div>
            <div class="flex justify-between items-center mb-2">
              <span class="text-sm text-gray-500">Max. Slippage</span>
              <span class="text-sm text-black font-bold">0.1 %</span>
            </div>
            <div class="flex justify-between items-center mb-4">
              <span class="text-sm text-gray-500">Exchange rate</span>
              <span class="text-sm text-black font-bold">1 USDT = 0.95 TBILL</span>
            </div>
            <div class="flex justify-between items-center mb-4">
              <span class="text-sm text-gray-500">Price Impact</span>
              <span class="text-sm text-black font-bold">0.00%</span>
            </div>
            <div class="flex justify-between items-center mb-4">
              <span class="text-sm text-gray-500">Trade Routed Through</span>
              <span class="text-sm text-black font-bold">Curve</span>
            </div>
            <div class="text-sm text-gray-500">
              *A whitelisted address is mandatory
            </div>
            <div class="flex flex-1 item-center py-4 justify-center">
              <button
                class="bg-gradient-to-r rounded-2xl from-blue-500 to-blue-700 hover:from-blue-700 hover:to-blue-900 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-opacity-50 text-white font-bold py-2 px-4 transition duration-300 ease-in-out transform hover:scale-105"
                onClick={approveAndBuy}
                disabled={isLoading}
              >
                {isLoading ? "Processing..." : "Buy Now"}
              </button>
            </div>
          </div>
        </div>
      </div>
    </BaseLayout>
  );
};

export default BuyTBillsNewUI; -->
